# -*- coding: utf-8 -*-
"""sent folder model from csv.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HUrKIo9-sKU6ZDYp3lcWDTn2s0McQpFO
"""

import pandas as pd
import re

# df = pd.read_csv('test sent export.zip', encoding='iso-8859-1')
df = pd.read_excel('scoped sent test.xlsx')

df.shape

scoped_df = df.iloc[-1000:]

scoped_df.index

# scoped_df.to_excel('scoped sent test.xlsx', index=False)

scoped_df.iloc[0]['Body']

df.iloc[-1000:]['Body']

documents = df.iloc[-1000:]['Body']

documents.isna().value_counts()

first_doc = documents[2:3].to_list()

first_doc[0]

def remove_headers(email):
  scoped_email = email
  scoped_email = re.sub('From:(.*)\r\n',' ',scoped_email)
  scoped_email = re.sub('Sent:(.*)\r\n',' ',scoped_email)
  scoped_email = re.sub('Received:(.*)\r\n',' ',scoped_email)
  scoped_email = re.sub('To:(.*)\r\n',' ',scoped_email)
  scoped_email = re.sub('Cc:(.*)\r\n',' ',scoped_email)
  scoped_email = re.sub('Subject:',' ',scoped_email)
  return scoped_email

def remove_footers(email):
  scoped_email = email
  scoped_email = re.sub('This e-mail transmission contains confidential(.*)jurisdiction of the State of New York',
                        ' ',scoped_email)
  scoped_email = re.sub('This e-mail may contain confidential(.*)delete this e-mail immediately',
                        ' ',scoped_email)
  scoped_email = re.sub('This e-mail may also contain protected health information(.*)consent for release of this type of information.',
                        ' ',scoped_email)
  scoped_email = re.sub('This email \(including any attachments\) is intended(.*)delete the email and any attachments',
                        ' ',scoped_email)
  scoped_email = re.sub('Confidential Disclaimer(.*)destroy all copies of the original message', ' ', scoped_email)
  return scoped_email

def remove_sigs(email):
  scoped_email = email
  scoped_email = re.sub('<[^>]*>', ' ', scoped_email)
  scoped_email = re.sub('Claims Services Representative',' ',scoped_email)
  scoped_email = re.sub('Claims Services',' ',scoped_email)
  scoped_email = re.sub('Claims Administration',' ',scoped_email)
  scoped_email = re.sub('New York State Insurance Fund',' ',scoped_email)
  scoped_email = re.sub('199 Church Street, New York, NY 10007',' ',scoped_email)
  scoped_email = re.sub('thank',' ',scoped_email.lower())
  scoped_email = re.sub('thanks',' ',scoped_email.lower())
  scoped_email = re.sub('please',' ',scoped_email.lower())
  scoped_email = re.sub('facebook',' ',scoped_email.lower())
  scoped_email = re.sub('youtube',' ',scoped_email.lower())
  scoped_email = re.sub('twitter',' ',scoped_email.lower())
  scoped_email = re.sub('instagram',' ',scoped_email.lower())
  scoped_email = re.sub('youtube',' ',scoped_email.lower())
  scoped_email = re.sub('wdang@nysif.com',' ',scoped_email.lower())
  scoped_email = re.sub('212.312.7608',' ',scoped_email.lower())
  return scoped_email

def clean_email(email):
  return remove_sigs(remove_headers(remove_footers(email)))

clean_email(first_doc[0])

cleaned_emails = [clean_email(document)for document in documents]

len(cleaned_emails)

import spacy
spacy.load('en')
from spacy.lang.en import English
parser = English()
def tokenize(text):
    lda_tokens = []
    tokens = parser(text)
    for token in tokens:
        if token.orth_.isspace():
            continue
        elif token.like_url:
            lda_tokens.append('URL')
        elif token.orth_.startswith('@'):
            lda_tokens.append('SCREEN_NAME')
        else:
            lda_tokens.append(token.lower_)
    return lda_tokens

import nltk
nltk.download('wordnet')
from nltk.corpus import wordnet as wn
def get_lemma(word):
    lemma = wn.morphy(word)
    if lemma is None:
        return word
    else:
        return lemma
    
from nltk.stem.wordnet import WordNetLemmatizer
def get_lemma2(word):
    return WordNetLemmatizer().lemmatize(word)

nltk.download('stopwords')
en_stop = set(nltk.corpus.stopwords.words('english'))

def prepare_text_for_lda(text):
    tokens = tokenize(text)
    tokens = [token for token in tokens if len(token) > 4]
    tokens = [token for token in tokens if token not in en_stop]
    tokens = [get_lemma(token) for token in tokens]
    return tokens

pd.Series(cleaned_emails).to_csv('body_only.csv')

import random
text_data = []
with open('body_only.csv') as f:
    for line in f:
        tokens = prepare_text_for_lda(line)
        # if random.random() > .99:
        if random.random() > .8:
            print(tokens)
            text_data.append(tokens)

from gensim import corpora
dictionary = corpora.Dictionary(text_data)
corpus = [dictionary.doc2bow(text) for text in text_data]
import pickle
pickle.dump(corpus, open('corpus.pkl', 'wb'))
dictionary.save('dictionary.gensim')

import gensim
NUM_TOPICS = 5
ldamodel = gensim.models.ldamodel.LdaModel(corpus, num_topics = NUM_TOPICS, id2word=dictionary, passes=15)
ldamodel.save('model5.gensim')
topics = ldamodel.print_topics(num_words=4)
for topic in topics:
    print(topic)

[email for email in cleaned_emails if 'following' in email][5:10]

!pip install pyLDAvis

dictionary = gensim.corpora.Dictionary.load('dictionary.gensim')
corpus = pickle.load(open('corpus.pkl', 'rb'))
lda = gensim.models.ldamodel.LdaModel.load('model5.gensim')
import pyLDAvis.gensim
lda_display = pyLDAvis.gensim.prepare(lda, corpus, dictionary, sort_topics=False)
pyLDAvis.display(lda_display)



